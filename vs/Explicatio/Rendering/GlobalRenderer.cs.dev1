using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Drawing;
using System.Drawing.Imaging;
using OpenTK;
using OpenTK.Graphics.OpenGL;
using Explicatio.Worlds;
using Explicatio.Graphics.Shaders;
using Explicatio.Graphics;
using Explicatio.Graphics.Primitives;
using Explicatio.Utils;

namespace Explicatio.Rendering
{
    public static class GlobalRenderer
    {
        const int CHUNK_SIZE = 64;
        //const int WORLD_SIZE = 144;
        const int WORLD_SIZE = 1024;
        const int WORLD_DIM = WORLD_SIZE / CHUNK_SIZE;

        public static int[] blocksData = new int[CHUNK_SIZE * CHUNK_SIZE];
        public static int[] blocksData1 = new int[CHUNK_SIZE * CHUNK_SIZE];
        public static int[] blocksData2 = new int[CHUNK_SIZE * CHUNK_SIZE];
        public static int[] blocksData3 = new int[CHUNK_SIZE * CHUNK_SIZE];

        private static int pointVertexArrayHandle;
        private static int pointVertexBufferHandle;
        private static Vector2[] pointVector = new Vector2[] { new Vector2(0, 0) };


        //private static float[] worldVertices = new float[WORLD_DIM * WORLD_DIM * CHUNK_SIZE * CHUNK_SIZE * 2 * 4];
        //private static float[] worldUVs = new float[WORLD_DIM * WORLD_DIM * CHUNK_SIZE * CHUNK_SIZE * 2 * 4];
        //private static int[] worldBuffers = new int[WORLD_DIM * WORLD_DIM * CHUNK_SIZE * CHUNK_SIZE];

        private static float[] VDataBlock = new float[] {
                -1.0f,  0.0f, // 0
                 1.0f,  1.0f, // 2
                 1.0f, -1.0f, // 4
                 1.0f,  1.0f, // 2
                 1.0f, -1.0f, // 4
                 3.0f,  0.0f  // 6
            };

        private class NChunk
        {

            //public int[] buffers = new int[CHUNK_SIZE * CHUNK_SIZE];
            public int vertexArrayHandle;

            private int wvbh;
            private int wuvspb;
            private int indexesBufferHandle;
            //public uint[] indexes = new uint[CHUNK_SIZE * CHUNK_SIZE * 6];

            public NChunk()
            {
                vertexArrayHandle = GL.GenVertexArray();
                GL.BindVertexArray(vertexArrayHandle);
                GL.EnableVertexAttribArray(0);
                GL.EnableVertexAttribArray(1);

                wvbh = GL.GenBuffer();
                GL.BindBuffer(BufferTarget.ArrayBuffer, wvbh);
                wuvspb = GL.GenBuffer();
                GL.BindBuffer(BufferTarget.ArrayBuffer, wuvspb);
                //indexesBufferHandle = GL.GenBuffer();
                //GL.BindBuffer(BufferTarget.ElementArrayBuffer, indexesBufferHandle);

                Util.PrintGLError();
            }

            public void renderChunk()
            {
                float[] vertices = new float[CHUNK_SIZE * CHUNK_SIZE * 12];
                float[] UVs = new float[CHUNK_SIZE * CHUNK_SIZE * 12];

                float x, y;
                for (int k = 0; k < CHUNK_SIZE; k++)
                {
                    for (int l = 0; l < CHUNK_SIZE; l++)
                    {
                        x = (l - k) * 1.939f;
                        y = (l + k) * 0.969f;

                        int w = (k * 12) + (l * 12 * CHUNK_SIZE);

                        vertices[w + 0] = VDataBlock[0] + x;
                        vertices[w + 1] = VDataBlock[1] + y;

                        vertices[w + 2] = VDataBlock[2] + x;
                        vertices[w + 3] = VDataBlock[3] + y;
                        vertices[w + 4] = VDataBlock[4] + x;
                        vertices[w + 5] = VDataBlock[5] + y;

                        vertices[w + 6] = VDataBlock[6] + x;
                        vertices[w + 7] = VDataBlock[7] + y;
                        vertices[w + 8] = VDataBlock[8] + x;
                        vertices[w + 9] = VDataBlock[9] + y;

                        vertices[w + 10] = VDataBlock[10] + x;
                        vertices[w + 11] = VDataBlock[11] + y;

                        UVs[w + 0] = 0.0f;
                        UVs[w + 1] = 0.5f;

                        UVs[w + 2] = 0.5f;
                        UVs[w + 3] = 1.0f;
                        UVs[w + 4] = 0.5f;
                        UVs[w + 5] = 0.0f;

                        UVs[w + 6] = 0.5f;
                        UVs[w + 7] = 1.0f;
                        UVs[w + 8] = 0.5f;
                        UVs[w + 9] = 0.0f;

                        UVs[w + 10] = 1.0f;
                        UVs[w + 11] = 0.5f;

                        //vertices[w + 0] = VDataBlock[0] + x;
                        //vertices[w + 1] = VDataBlock[1] + y;
                        //vertices[w + 2] = VDataBlock[2] + x;
                        //vertices[w + 3] = VDataBlock[3] + y;
                        //vertices[w + 4] = VDataBlock[4] + x;
                        //vertices[w + 5] = VDataBlock[5] + y;
                        //vertices[w + 6] = VDataBlock[6] + x;
                        //vertices[w + 7] = VDataBlock[7] + y;

                        //UVs[w + 0] = 0.0f;
                        //UVs[w + 1] = 0.5f;
                        //UVs[w + 2] = 0.5f;
                        //UVs[w + 3] = 1.0f;
                        //UVs[w + 4] = 0.5f;
                        //UVs[w + 5] = 0.0f;
                        //UVs[w + 6] = 1.0f;
                        //UVs[w + 7] = 0.5f;

                        //int w2 = (k * 6) + (l * 6 * CHUNK_SIZE);
                        //uint ww2 = (uint)w;
                        //for (int m = 0; m < 6; m++)
                        //{
                        //    indexes[w2 + 0] = 0 + ww2;
                        //    indexes[w2 + 1] = 1 + ww2;
                        //    indexes[w2 + 2] = 2 + ww2;
                        //    indexes[w2 + 3] = 1 + ww2;
                        //    indexes[w2 + 4] = 2 + ww2;
                        //    indexes[w2 + 5] = 3 + ww2;
                        //}
                    }
                }

                //uint ww, ww2;
                //for (uint i = 0; i < CHUNK_SIZE * CHUNK_SIZE; i++)
                //{
                //    ww = i * 6;
                //    ww2 = i * 4;
                //    indexes[ww + 0] = 0 + ww2;
                //    indexes[ww + 1] = 1 + ww2;
                //    indexes[ww + 2] = 2 + ww2;
                //    indexes[ww + 3] = 1 + ww2;
                //    indexes[ww + 4] = 2 + ww2;
                //    indexes[ww + 5] = 3 + ww2;
                //}

                GL.BindVertexArray(vertexArrayHandle);

                //GL.DeleteBuffer(wvbh);
                GL.BindBuffer(BufferTarget.ArrayBuffer, wvbh);
                GL.BufferData<float>(BufferTarget.ArrayBuffer, new IntPtr(sizeof(float) * vertices.Length), vertices, BufferUsageHint.StaticDraw);
                GL.VertexAttribPointer(0, 2, VertexAttribPointerType.Float, false, 0, IntPtr.Zero);

                //GL.DeleteBuffer(wuvspb);
                GL.BindBuffer(BufferTarget.ArrayBuffer, wuvspb);
                GL.BufferData<float>(BufferTarget.ArrayBuffer, new IntPtr(sizeof(float) * UVs.Length), UVs, BufferUsageHint.StaticDraw);
                GL.VertexAttribPointer(1, 2, VertexAttribPointerType.Float, false, 0, IntPtr.Zero);

                //GL.BindBuffer(BufferTarget.ElementArrayBuffer, indexesBufferHandle);
                //GL.BufferData<uint>(BufferTarget.ElementArrayBuffer, new IntPtr(sizeof(uint) * indexes.Length), indexes, BufferUsageHint.StaticDraw);

                //GL.VertexAttribDivisor(0, 4);
                //GL.VertexAttribDivisor(1, 4);
                Util.PrintGLError();
            }
        }

        private static NChunk[] chunks;

        public static void InitTemp()
        {
            string filename = "Content/gfx/terrain.png";

            int id = GL.GenTexture();
            GL.BindTexture(TextureTarget.Texture2D, id);

            Bitmap bmp = new Bitmap(filename);
            BitmapData bmp_data = bmp.LockBits(new Rectangle(0, 0, bmp.Width, bmp.Height), ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);

            GL.TexImage2D(TextureTarget.Texture2D, 0, PixelInternalFormat.Rgba, bmp_data.Width, bmp_data.Height, 0, OpenTK.Graphics.OpenGL.PixelFormat.Bgra, PixelType.UnsignedByte, bmp_data.Scan0);

            bmp.UnlockBits(bmp_data);

            // We haven't uploaded mipmaps, so disable mipmapping (otherwise the texture will not appear).
            // On newer video cards, we can use GL.GenerateMipmaps() or GL.Ext.GenerateMipmaps() to create
            // mipmaps automatically. In that case, use TextureMinFilter.LinearMipmapLinear to enable them.
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMagFilter, (int)TextureMagFilter.Nearest);
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
            //GL.GenerateMipmap(GenerateMipmapTarget.Texture2D);


            Util.PrintGLError();
            RenderingManager.ChangeCurrentShader(Shader.Chunk2Shader, false);
            Random r = new Random();



            for (int i = 0; i < CHUNK_SIZE * CHUNK_SIZE; i++)
            {
                blocksData[i] = r.Next(0, 3);
                blocksData1[i] = r.Next(0, 3);
                blocksData2[i] = r.Next(0, 3);
                blocksData3[i] = r.Next(0, 3);
            }

            chunks = new NChunk[WORLD_DIM * WORLD_DIM];

            int t1;
            int t2;
            int t3;
            float x;
            float y;
            Vector4 v4;
            for (int i = 0; i < WORLD_DIM; i++)
            {
                for (int j = 0; j < WORLD_DIM; j++)
                {
                    chunks[i * WORLD_DIM + j] = new NChunk();
                    chunks[i * WORLD_DIM + j].renderChunk();
            //        Util.PrintGLError();
            //        Console.WriteLine(i * WORLD_DIM + j);
            //        //t1 = ((i * WORLD_DIM * WORLD_DIM * CHUNK_SIZE * CHUNK_SIZE) + (j * WORLD_DIM * CHUNK_SIZE * CHUNK_SIZE));
            //        for (int k = 0; k < CHUNK_SIZE; k++)
            //        {
            //            //t2 = k * 8;
            //            // t2 = t1 + (k * CHUNK_SIZE * CHUNK_SIZE);
            //            for (int l = 0; l < CHUNK_SIZE; l++)
            //            {
            //                x = (l - k) * 1.939f;
            //                y = (l + k) * 0.969f;
            //                //t3 = t1 + (t2 * CHUNK_SIZE + l);
            //                //t3 = t2 + (l * CHUNK_SIZE);

            //                int w = l * WORLD_DIM * WORLD_DIM * CHUNK_SIZE * CHUNK_SIZE + k * WORLD_DIM * CHUNK_SIZE * CHUNK_SIZE + j * CHUNK_SIZE * CHUNK_SIZE + i * CHUNK_SIZE;

            //                worldVertices[w + 0] = VDataBlock[0] + x;
            //                worldVertices[w + 1] = VDataBlock[1] + y;
            //                worldVertices[w + 2] = VDataBlock[2] + x;
            //                worldVertices[w + 3] = VDataBlock[3] + y;
            //                worldVertices[w + 4] = VDataBlock[4] + x;
            //                worldVertices[w + 5] = VDataBlock[5] + y;
            //                worldVertices[w + 6] = VDataBlock[6] + x;
            //                worldVertices[w + 7] = VDataBlock[7] + y;

            //                worldUVs[w + 0] = 0.0f;
            //                worldUVs[w + 1] = 0.5f;
            //                worldUVs[w + 2] = 0.5f;
            //                worldUVs[w + 3] = 0.1f;
            //                worldUVs[w + 4] = 0.5f;
            //                worldUVs[w + 5] = 0.0f;
            //                worldUVs[w + 6] = 1.0f;
            //                worldUVs[w + 7] = 0.5f;

            //                int wva = GL.GenVertexArray();
            //                GL.BindVertexArray(wva);
            //                GL.EnableVertexAttribArray(0);
            //                GL.EnableVertexAttribArray(1);

            //                Util.PrintGLError();
            //                int wvbh = GL.GenBuffer();
            //                GL.BindBuffer(BufferTarget.ArrayBuffer, wvbh);
            //                float[] blockVertices = new float[8];
            //                Array.Copy(worldVertices, w, blockVertices, 0, 8);
            //                GL.BufferData<float>(BufferTarget.ArrayBuffer, new IntPtr(sizeof(float) * 8), blockVertices, BufferUsageHint.StaticDraw);
            //                Util.PrintGLError();
            //                GL.VertexAttribPointer(0, 4, VertexAttribPointerType.Float, false, 0, IntPtr.Zero);
            //                Util.PrintGLError();

            //                int wuvspb = GL.GenBuffer();
            //                GL.BindBuffer(BufferTarget.ArrayBuffer, wuvspb);
            //                float[] blockUVs = new float[8];
            //                Array.Copy(worldUVs, w, blockUVs, 0, 8);
            //                GL.BufferData<float>(BufferTarget.ArrayBuffer, new IntPtr(sizeof(float) * 8), blockUVs, BufferUsageHint.StaticDraw);
            //                Util.PrintGLError();
            //                GL.VertexAttribPointer(1, 4, VertexAttribPointerType.Float, false, 0, IntPtr.Zero);
            //                Util.PrintGLError();

            //                worldBuffers[w / 8] = wva;
                        }
                    }
            //    }
            //}
            Util.PrintGLError();
        }

        public static void RenderAllChunks()
        {
            RenderingManager.ChangeCurrentShader(Shader.Chunk2Shader, false);
            //GL.Enable(EnableCap.PrimitiveRestart);
            //GL.PrimitiveRestartIndex(9000);

            Matrix4 m;
            NChunk c;
            for (int i = 0; i < 1; i++ )
            {
               chunks[i].renderChunk();
            }
                for (int i = 0; i < WORLD_DIM; i++)
                {
                    for (int j = 0; j < WORLD_DIM; j++)
                    {
                        Shader.Chunk2Shader.ProjectionModelMatrix = Matrix4.CreateTranslation((j - i) * 30.9f, (j + i) * 15.46f, 0) * RenderingManager.ProjectionMatrix;
                        //RenderChunk(chunks[i * WORLD_DIM + j]);
                        c = chunks[i * WORLD_DIM + j];
                        //c.renderChunk();
                        GL.BindVertexArray(c.vertexArrayHandle);
                        //GL.DrawArraysInstanced(PrimitiveType.TriangleStrip, 0, CHUNK_SIZE * CHUNK_SIZE * 4, 1);
                        //GL.DrawArraysInstanced(PrimitiveType.TriangleStrip, 0, 4, CHUNK_SIZE * CHUNK_SIZE);

                        //for (int k = 0; k < CHUNK_SIZE * CHUNK_SIZE; k++)
                        //{
                        //instanceID = i;
                        //GL.DrawArrays(PrimitiveType.TriangleStrip, 0, 4);
                        //glDrawArrays(mode, first, count);
                        //}

                        //GL.DrawArrays(PrimitiveType.TriangleStrip, 0, CHUNK_SIZE * CHUNK_SIZE * 4);
                        //GL.DrawElements(PrimitiveType.TriangleStrip, CHUNK_SIZE * CHUNK_SIZE * 5, DrawElementsType.UnsignedInt, 0);
                        GL.DrawArrays(PrimitiveType.Triangles, 0, CHUNK_SIZE * CHUNK_SIZE * 6);
                        //GL.DrawElements(PrimitiveType.Triangles, CHUNK_SIZE * CHUNK_SIZE * 6, DrawElementsType.UnsignedInt, 0);
                        // GL.DrawElements(PrimitiveType.Triangles, CHUNK_SIZE * CHUNK_SIZE * 6, DrawElementsType.UnsignedInt, 0);
                    }
                }

            //GL.Disable(EnableCap.PrimitiveRestart);
        }

        private static void RenderChunk(NChunk c)
        {

            RenderingManager.ModelMatrix = Matrix4.Identity;


            //Parallel.For(0, CHUNK_SIZE * CHUNK_SIZE, x =>
            //{
            //    int k = x / CHUNK_SIZE;
            //    int l = x % CHUNK_SIZE;
            //    GL.BindVertexArray(c.buffers[k * CHUNK_SIZE + l]);
            //    GL.DrawArrays(PrimitiveType.TriangleStrip, 0, 4);
            //});
            for (int k = 0; k < CHUNK_SIZE; k++)
            {
                for (int l = 0; l < CHUNK_SIZE; l++)
                {
                    //GL.BindVertexArray(c.buffers[k * CHUNK_SIZE + l]);
                    //GL.DrawArrays(PrimitiveType.TriangleStrip, 0, 4);
                }
            }

            //int t1;
            //int t2;
            //int t3;
            //for (int i = 0; i < WORLD_DIM; i++)
            //{
            //    for (int j = 0; j < WORLD_DIM; j++)
            //    {
            //        t1 = ((i * WORLD_DIM * WORLD_DIM * WORLD_DIM) + (j * WORLD_DIM * WORLD_DIM));
            //        for (int k = 0; k < CHUNK_SIZE; k++)
            //        {
            //            t2 = k;
            //            for (int l = 0; l < CHUNK_SIZE; l++)
            //            {
            //                t3 = t1 + (t2 * CHUNK_SIZE + l);
            //                GL.BindVertexArray(worldBuffers[t3]);
            //                GL.DrawArrays(PrimitiveType.Triangles, 0, 4);
            //            }
            //        }
            //    }
            //}



            //RenderingManager.ChangeCurrentShader(Shader.ChunkShader, true);
            //RenderingManager.ModelMatrix = Matrix4.Identity;

            //GL.BindVertexArray(Primitive.CommonVertexArrayHandle);
            //GL.BindBuffer(BufferTarget.ElementArrayBuffer, Primitive.singleColorTriangle.indiecesBufferHandle);
            //Random r = new Random();
            //for (int i = 0; i < CHUNK_SIZE * CHUNK_SIZE; i++)
            //{
            //    blocksData[i] = r.Next(0, 3);
            //    blocksData1[i] = r.Next(0, 3);
            //    blocksData2[i] = r.Next(0, 3);
            //    blocksData3[i] = r.Next(0, 3);
            //}
            //int x;
            //for (int i = 0; i < 80; i++)
            //{
            //    for (int j = 0; j < 80; j++)
            //    {
            //        x = r.Next(0, 4);
            //        RenderingManager.ModelMatrix = Matrix4.CreateTranslation((j - i) * 11.634f, (j + i) * 5.814f, 0);
            //        unchecked
            //        {
            //            unsafe
            //            {
                           
            //                if (x == 0)
            //                {
            //                    fixed (int* bdp = &blocksData[0])
            //                    {
            //                        GL.Uniform1(Shader.ChunkShader.ChunkBlocksHandle, CHUNK_SIZE * CHUNK_SIZE, bdp);
            //                    }
            //                }
            //                else if (x == 1)
            //                {
            //                    fixed (int* bdp = &blocksData1[0])
            //                    {
            //                        GL.Uniform1(Shader.ChunkShader.ChunkBlocksHandle, CHUNK_SIZE * CHUNK_SIZE, bdp);
            //                    }
            //                }
            //                else if (x == 2)
            //                {
            //                    fixed (int* bdp = &blocksData2[0])
            //                    {
            //                        GL.Uniform1(Shader.ChunkShader.ChunkBlocksHandle, CHUNK_SIZE * CHUNK_SIZE, bdp);
            //                    }
            //                }
            //                else if (x == 3)
            //                {
            //                    fixed (int* bdp = &blocksData3[0])
            //                    {
            //                        GL.Uniform1(Shader.ChunkShader.ChunkBlocksHandle, CHUNK_SIZE * CHUNK_SIZE, bdp);
            //                    }
            //                }
            //            }
            //    }
            //        GL.DrawElements(PrimitiveType.Triangles, Primitive.singleColorTriangle.Indices.Length, DrawElementsType.UnsignedByte, 0);
            //    }
            //}
        }
    }
}
